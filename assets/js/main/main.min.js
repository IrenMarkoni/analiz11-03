"use strict";

if ($(window).width() > 764) {
  var e = !1;
  $(".header__nav-link_dropdown").hover(function (t) {
    t.preventDefault(), $(this).parent().find(".header__dropdown-list").addClass("open"), e = !0;
  }, function () {
    setTimeout(function () {
      e || $(".header__dropdown-list").removeClass("open");
    }, 500), e = !1;
  }), $(".header__dropdown-list").hover(function () {
    e = !0;
  }, function () {
    e = !1, setTimeout(function () {
      e || $(".header__dropdown-list").removeClass("open");
    }, 500);
  });
}

function getStyles(e) {
  return window.getComputedStyle(e, null);
}

function anim() {
  document.querySelectorAll(".anim").forEach(function (e) {
    var t = e.getBoundingClientRect().top;
    var n = ["animmask", "animslide", "animslidefast", "animslideup", "animslideleft", "animslidebig", "animgraph"];
    var i;
    i = window.innerWidth > 650 ? 120 : 30, e.classList.contains("animgraph") && (i = 0), t < window.innerHeight - i && (n.forEach(function (t) {
      e.classList.contains(t) && e.classList.remove(t + "hide");
    }), e.classList.forEach(function (t) {
      var i = 0;
      t.includes("animdalay") && (i = parseInt(t.replace("animdalay", "")));
      var o = 1e3 * parseFloat(getStyles(e).transitionDuration);
      setTimeout(function () {
        var _e$classList;

        (_e$classList = e.classList).remove.apply(_e$classList, ["animdalay" + i, "anim"].concat(n));
      }, i + o);
    }));
  });
}

function scroll() {
  anim();
}

function scrollWidth() {
  var e = document.createElement("div");
  e.style.height = "50px", e.style.width = "50px", e.style.overflowY = "scroll", document.body.appendChild(e);
  var t = e.offsetWidth - e.clientWidth;
  return e.remove(), t;
}

function bodyFixed() {
  $("body").css({
    "padding-right": scrollWidth() + "px",
    overflow: "hidden"
  });
}

function clearInlineStyle(e) {
  e.removeAttr("style");
}

function opensuccess() {
  setTimeout(function () {
    $(".modal").removeClass("active"), $(".js-overlay-modal").addClass("active"), setTimeout(function () {
      $(".modal[data-modal=thanks-modal]").addClass("active");
    }, 10);
  }, 200);
}

function a(e) {
  e.attr("disabled", "disabled").css("width", e.outerWidth() + "px").css("height", e.outerHeight() + "px").html('<div class="lds-ellipsis"><div></div><div></div><div></div><div></div></div>');
}

function s(e, t) {
  e.removeAttr("disabled").removeAttr("style").html(t);
}

function d(e, t) {
  var n = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  return fetch(e, {
    method: "POST",
    body: t,
    headers: n
  });
}

function l(e) {
  return e.replace(/\D+/g, "");
}

$(window).width() < 764 && ($(".burger").on("click", function () {
  $(this).toggleClass("active"), $(".header__menu").toggleClass("mobile-open"), $("body").toggleClass("no-scroll");
}), $(".header__nav-link_dropdown").on("click", function (e) {
  e.preventDefault(), $(this).parent().find(".header__dropdown-list").toggleClass("open").slideToggle(400), isSubMenuOpen = !0;
})), document.querySelector(".banner__slider") && new Swiper(".banner__slider", {
  speed: 400,
  slidesPerView: 1,
  pagination: {
    el: ".banner__pagination",
    clickable: !0
  },
  navigation: {
    nextEl: ".banner__slider-next",
    prevEl: ".banner__slider-prev"
  }
}), $(document).ready(function () {
  $(".services__item-content").each(function () {
    var e = $(this).find(".services__item-title").height(),
        t = $(this).parent(".services__item").height() - e - 30;
    $(this).css({
      top: "".concat(t, "px")
    });
  });
}), $("input[name=phone]").inputmask("+7 (999) 999-99-99"), window.addEventListener("load", function () {
  setTimeout(function () {
    anim();
  }, 50);
}), window.addEventListener("resize", function () {
  anim();
}), window.addEventListener("scroll", function () {
  scroll();
}), document.addEventListener("DOMContentLoaded", function () {
  var e = document.querySelectorAll(".openmodal"),
      t = document.querySelector(".js-overlay-modal"),
      n = document.querySelectorAll(".modal__close");
  e.forEach(function (e) {
    e.addEventListener("click", function (e) {
      e.preventDefault();
      var n = this.getAttribute("data-modal");
      document.querySelector('.modal[data-modal="' + n + '"]').classList.add("active"), t.classList.add("active"), bodyFixed();
    });
  }), n.forEach(function (e) {
    e.addEventListener("click", function (e) {
      this.closest(".modal").classList.remove("active"), t.classList.remove("active"), clearInlineStyle($("body"));
    });
  }), document.body.addEventListener("keyup", function (e) {
    27 == e.keyCode && (document.querySelector(".modal.active").classList.remove("active"), document.querySelector(".overlay").classList.remove("active"), clearInlineStyle($("body")));
  }, !1), t.addEventListener("click", function () {
    document.querySelector(".modal.active").classList.remove("active"), this.classList.remove("active"), clearInlineStyle($("body"));
  });
}), $("form").on("submit", function (e) {
  e.preventDefault();
  var t = $(this),
      n = t.find("button"),
      i = t.find("button").html();
  var o = new FormData(e.target);
  a(n), d("https://jsonplaceholder.typicode.com/users", o).then(function (e) {
    return e.json();
  }).then(function (e) {
    s(n, i), opensuccess(), t.trigger("reset");
  })["catch"](function (e) {
    return console.log(e);
  });
});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
